### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Application {
  createdAt: DateTime
  updatedAt: DateTime
}

type ApplicationEntity {
  attributes: Application
  id: ID
}

type ApplicationEntityResponse {
  data: ApplicationEntity
}

type ApplicationEntityResponseCollection {
  data: [ApplicationEntity!]!
  meta: ResponseCollectionMeta!
}

input ApplicationFiltersInput {
  and: [ApplicationFiltersInput]
  createdAt: DateTimeFilterInput
  data: JSONFilterInput
  id: IDFilterInput
  not: ApplicationFiltersInput
  or: [ApplicationFiltersInput]
  updatedAt: DateTimeFilterInput
}

input ApplicationInput {
  data: JSON
}

type ApplicationRelationResponseCollection {
  data: [ApplicationEntity!]!
}

type Article {
  content: String
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  jobsCategory: ArticleJobsCategoryEntityResponse
  locale: String
  localizations(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  mediaGallery(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  newsCategory: ArticleNewsCategoryEntityResponse
  perex: String
  pressCategory: ArticlePressCategoryEntityResponse
  publishedAt: DateTime
  seo: ComponentGeneralSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticleEntity {
  attributes: Article
  id: ID
}

type ArticleEntityResponse {
  data: ArticleEntity
}

type ArticleEntityResponseCollection {
  data: [ArticleEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleFiltersInput {
  and: [ArticleFiltersInput]
  content: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  jobsCategory: ArticleJobsCategoryFiltersInput
  locale: StringFilterInput
  localizations: ArticleFiltersInput
  newsCategory: ArticleNewsCategoryFiltersInput
  not: ArticleFiltersInput
  or: [ArticleFiltersInput]
  perex: StringFilterInput
  pressCategory: ArticlePressCategoryFiltersInput
  publishedAt: DateTimeFilterInput
  seo: ComponentGeneralSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleInput {
  content: String
  coverMedia: ID
  jobsCategory: ID
  mediaGallery: [ID]
  newsCategory: ID
  perex: String
  pressCategory: ID
  publishedAt: DateTime
  seo: ComponentGeneralSeoInput
  slug: String
  title: String
}

type ArticleJobsCategory {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticleJobsCategoryEntity {
  attributes: ArticleJobsCategory
  id: ID
}

type ArticleJobsCategoryEntityResponse {
  data: ArticleJobsCategoryEntity
}

type ArticleJobsCategoryEntityResponseCollection {
  data: [ArticleJobsCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleJobsCategoryFiltersInput {
  and: [ArticleJobsCategoryFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ArticleJobsCategoryFiltersInput
  or: [ArticleJobsCategoryFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleJobsCategoryInput {
  articles: [ID]
  slug: String
  title: String
}

type ArticleJobsCategoryRelationResponseCollection {
  data: [ArticleJobsCategoryEntity!]!
}

type ArticleNewsCategory {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticleNewsCategoryEntity {
  attributes: ArticleNewsCategory
  id: ID
}

type ArticleNewsCategoryEntityResponse {
  data: ArticleNewsCategoryEntity
}

type ArticleNewsCategoryEntityResponseCollection {
  data: [ArticleNewsCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticleNewsCategoryFiltersInput {
  and: [ArticleNewsCategoryFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ArticleNewsCategoryFiltersInput
  or: [ArticleNewsCategoryFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticleNewsCategoryInput {
  articles: [ID]
  slug: String
  title: String
}

type ArticleNewsCategoryRelationResponseCollection {
  data: [ArticleNewsCategoryEntity!]!
}

type ArticlePressCategory {
  articles(filters: ArticleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleRelationResponseCollection
  createdAt: DateTime
  slug: String!
  title: String!
  updatedAt: DateTime
}

type ArticlePressCategoryEntity {
  attributes: ArticlePressCategory
  id: ID
}

type ArticlePressCategoryEntityResponse {
  data: ArticlePressCategoryEntity
}

type ArticlePressCategoryEntityResponseCollection {
  data: [ArticlePressCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input ArticlePressCategoryFiltersInput {
  and: [ArticlePressCategoryFiltersInput]
  articles: ArticleFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: ArticlePressCategoryFiltersInput
  or: [ArticlePressCategoryFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ArticlePressCategoryInput {
  articles: [ID]
  slug: String
  title: String
}

type ArticlePressCategoryRelationResponseCollection {
  data: [ArticlePressCategoryEntity!]!
}

type ArticleRelationResponseCollection {
  data: [ArticleEntity!]!
}

input BooleanFilterInput {
  and: [Boolean]
  between: [Boolean]
  contains: Boolean
  containsi: Boolean
  endsWith: Boolean
  eq: Boolean
  eqi: Boolean
  gt: Boolean
  gte: Boolean
  in: [Boolean]
  lt: Boolean
  lte: Boolean
  ne: Boolean
  not: BooleanFilterInput
  notContains: Boolean
  notContainsi: Boolean
  notIn: [Boolean]
  notNull: Boolean
  null: Boolean
  or: [Boolean]
  startsWith: Boolean
}

type Branch {
  address: String
  contact: ContactEntityResponse
  createdAt: DateTime
  description: String
  latitude: Float
  locale: String
  localizations(filters: BranchFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): BranchRelationResponseCollection
  longitude: Float
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  navigateToLink: String
  offices(filters: OfficeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OfficeRelationResponseCollection
  seo: ComponentGeneralSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type BranchEntity {
  attributes: Branch
  id: ID
}

type BranchEntityResponse {
  data: BranchEntity
}

type BranchEntityResponseCollection {
  data: [BranchEntity!]!
  meta: ResponseCollectionMeta!
}

input BranchFiltersInput {
  address: StringFilterInput
  and: [BranchFiltersInput]
  contact: ContactFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  latitude: FloatFilterInput
  locale: StringFilterInput
  localizations: BranchFiltersInput
  longitude: FloatFilterInput
  navigateToLink: StringFilterInput
  not: BranchFiltersInput
  offices: OfficeFiltersInput
  or: [BranchFiltersInput]
  seo: ComponentGeneralSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BranchInput {
  address: String
  contact: ID
  description: String
  latitude: Float
  longitude: Float
  medias: [ID]
  navigateToLink: String
  offices: [ID]
  seo: ComponentGeneralSeoInput
  slug: String
  title: String
}

type BranchRelationResponseCollection {
  data: [BranchEntity!]!
}

type Bundle {
  additionalItems(filters: ComponentBlocksBundleContentItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBundleContentItem]
  additionalServices(filters: ComponentBlocksAccordionItemWithPriceFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksAccordionItemWithPrice]
  bundleItems(filters: ComponentBlocksBundleContentItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBundleContentItem]
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  description: String
  discountText: String
  discountTextShort: String
  documents: ComponentSectionsDocumentGroup
  locale: String
  localizations(filters: BundleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BundleRelationResponseCollection
  perex: String
  price: Float!
  publishedAt: DateTime
  seo: ComponentGeneralSeo
  sidebar: ComponentBlocksSidebar
  slug: String!
  title: String!
  type: ENUM_BUNDLE_TYPE!
  updatedAt: DateTime
}

type BundleEntity {
  attributes: Bundle
  id: ID
}

type BundleEntityResponse {
  data: BundleEntity
}

type BundleEntityResponseCollection {
  data: [BundleEntity!]!
  meta: ResponseCollectionMeta!
}

input BundleFiltersInput {
  additionalItems: ComponentBlocksBundleContentItemFiltersInput
  additionalServices: ComponentBlocksAccordionItemWithPriceFiltersInput
  and: [BundleFiltersInput]
  bundleItems: ComponentBlocksBundleContentItemFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  discountText: StringFilterInput
  discountTextShort: StringFilterInput
  documents: ComponentSectionsDocumentGroupFiltersInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: BundleFiltersInput
  not: BundleFiltersInput
  or: [BundleFiltersInput]
  perex: StringFilterInput
  price: FloatFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentGeneralSeoFiltersInput
  sidebar: ComponentBlocksSidebarFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input BundleInput {
  additionalItems: [ComponentBlocksBundleContentItemInput]
  additionalServices: [ComponentBlocksAccordionItemWithPriceInput]
  bundleItems: [ComponentBlocksBundleContentItemInput]
  coverMedia: ID
  description: String
  discountText: String
  discountTextShort: String
  documents: ComponentSectionsDocumentGroupInput
  perex: String
  price: Float
  publishedAt: DateTime
  seo: ComponentGeneralSeoInput
  sidebar: ComponentBlocksSidebarInput
  slug: String
  title: String
  type: ENUM_BUNDLE_TYPE
}

type BundleRelationResponseCollection {
  data: [BundleEntity!]!
}

type Cemetery {
  address: String
  allowInCeremonies: Boolean!
  allowInDebtors: Boolean!
  contact: ContactEntityResponse
  createdAt: DateTime
  description: String
  latitude: Float
  locale: String
  localizations(filters: CemeteryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CemeteryRelationResponseCollection
  longitude: Float
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  navigateToLink: String
  overrideOpeningHours: ComponentBlocksOpeningHoursUniversal
  seo: ComponentGeneralSeo
  slug: String!
  title: String!
  type: ENUM_CEMETERY_TYPE
  updatedAt: DateTime
}

type CemeteryEntity {
  attributes: Cemetery
  id: ID
}

type CemeteryEntityResponse {
  data: CemeteryEntity
}

type CemeteryEntityResponseCollection {
  data: [CemeteryEntity!]!
  meta: ResponseCollectionMeta!
}

input CemeteryFiltersInput {
  address: StringFilterInput
  allowInCeremonies: BooleanFilterInput
  allowInDebtors: BooleanFilterInput
  and: [CemeteryFiltersInput]
  contact: ContactFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  latitude: FloatFilterInput
  locale: StringFilterInput
  localizations: CemeteryFiltersInput
  longitude: FloatFilterInput
  navigateToLink: StringFilterInput
  not: CemeteryFiltersInput
  or: [CemeteryFiltersInput]
  overrideOpeningHours: ComponentBlocksOpeningHoursUniversalFiltersInput
  seo: ComponentGeneralSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CemeteryInput {
  address: String
  allowInCeremonies: Boolean
  allowInDebtors: Boolean
  contact: ID
  description: String
  latitude: Float
  longitude: Float
  medias: [ID]
  navigateToLink: String
  overrideOpeningHours: ComponentBlocksOpeningHoursUniversalInput
  seo: ComponentGeneralSeoInput
  slug: String
  title: String
  type: ENUM_CEMETERY_TYPE
}

type CemeteryRelationResponseCollection {
  data: [CemeteryEntity!]!
}

type Ceremony {
  birthYear: String
  cemetery: CemeteryEntityResponse
  company: String
  consentForPrivateFields: Boolean
  createdAt: DateTime
  dateTime: DateTime!
  name: String
  officiantProvidedBy: String
  type: String
  updatedAt: DateTime
}

type CeremonyEntity {
  attributes: Ceremony
  id: ID
}

type CeremonyEntityResponse {
  data: CeremonyEntity
}

type CeremonyEntityResponseCollection {
  data: [CeremonyEntity!]!
  meta: ResponseCollectionMeta!
}

input CeremonyFiltersInput {
  and: [CeremonyFiltersInput]
  birthYear: StringFilterInput
  cemetery: CemeteryFiltersInput
  company: StringFilterInput
  consentForPrivateFields: BooleanFilterInput
  createdAt: DateTimeFilterInput
  dateTime: DateTimeFilterInput
  id: IDFilterInput
  importId: StringFilterInput
  name: StringFilterInput
  not: CeremonyFiltersInput
  officiantProvidedBy: StringFilterInput
  or: [CeremonyFiltersInput]
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input CeremonyInput {
  birthYear: String
  cemetery: ID
  company: String
  consentForPrivateFields: Boolean
  dateTime: DateTime
  importId: String
  name: String
  officiantProvidedBy: String
  type: String
}

type CeremonyRelationResponseCollection {
  data: [CeremonyEntity!]!
}

type ComponentBlocksAccordionItem {
  content: String
  id: ID!
  title: String
}

input ComponentBlocksAccordionItemFiltersInput {
  and: [ComponentBlocksAccordionItemFiltersInput]
  content: StringFilterInput
  not: ComponentBlocksAccordionItemFiltersInput
  or: [ComponentBlocksAccordionItemFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksAccordionItemInput {
  content: String
  id: ID
  title: String
}

type ComponentBlocksAccordionItemWithPrice {
  description: String
  id: ID!
  price: Float
  title: String!
}

input ComponentBlocksAccordionItemWithPriceFiltersInput {
  and: [ComponentBlocksAccordionItemWithPriceFiltersInput]
  description: StringFilterInput
  not: ComponentBlocksAccordionItemWithPriceFiltersInput
  or: [ComponentBlocksAccordionItemWithPriceFiltersInput]
  price: FloatFilterInput
  title: StringFilterInput
}

input ComponentBlocksAccordionItemWithPriceInput {
  description: String
  id: ID
  price: Float
  title: String
}

type ComponentBlocksArticleItem {
  article: ArticleEntityResponse
  id: ID!
}

input ComponentBlocksArticleItemFiltersInput {
  and: [ComponentBlocksArticleItemFiltersInput]
  article: ArticleFiltersInput
  not: ComponentBlocksArticleItemFiltersInput
  or: [ComponentBlocksArticleItemFiltersInput]
}

input ComponentBlocksArticleItemInput {
  article: ID
  id: ID
}

type ComponentBlocksBlocksCeremonyArchiveBlock {
  button: ComponentBlocksButtonLink
  id: ID!
  title: String
}

input ComponentBlocksBlocksCeremonyArchiveBlockFiltersInput {
  and: [ComponentBlocksBlocksCeremonyArchiveBlockFiltersInput]
  button: ComponentBlocksButtonLinkFiltersInput
  not: ComponentBlocksBlocksCeremonyArchiveBlockFiltersInput
  or: [ComponentBlocksBlocksCeremonyArchiveBlockFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksBlocksCeremonyArchiveBlockInput {
  button: ComponentBlocksButtonLinkInput
  id: ID
  title: String
}

type ComponentBlocksBranchItem {
  branch: BranchEntityResponse
  id: ID!
}

input ComponentBlocksBranchItemFiltersInput {
  and: [ComponentBlocksBranchItemFiltersInput]
  branch: BranchFiltersInput
  not: ComponentBlocksBranchItemFiltersInput
  or: [ComponentBlocksBranchItemFiltersInput]
}

input ComponentBlocksBranchItemInput {
  branch: ID
  id: ID
}

type ComponentBlocksBundleContentItem {
  description: String!
  id: ID!
}

input ComponentBlocksBundleContentItemFiltersInput {
  and: [ComponentBlocksBundleContentItemFiltersInput]
  description: StringFilterInput
  not: ComponentBlocksBundleContentItemFiltersInput
  or: [ComponentBlocksBundleContentItemFiltersInput]
}

input ComponentBlocksBundleContentItemInput {
  description: String
  id: ID
}

type ComponentBlocksBundleGroup {
  bundles(filters: ComponentBlocksBundleItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBundleItem]
  id: ID!
  title: String!
}

input ComponentBlocksBundleGroupFiltersInput {
  and: [ComponentBlocksBundleGroupFiltersInput]
  bundles: ComponentBlocksBundleItemFiltersInput
  not: ComponentBlocksBundleGroupFiltersInput
  or: [ComponentBlocksBundleGroupFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksBundleGroupInput {
  bundles: [ComponentBlocksBundleItemInput]
  id: ID
  title: String
}

type ComponentBlocksBundleItem {
  bundle: BundleEntityResponse
  id: ID!
}

input ComponentBlocksBundleItemFiltersInput {
  and: [ComponentBlocksBundleItemFiltersInput]
  bundle: BundleFiltersInput
  not: ComponentBlocksBundleItemFiltersInput
  or: [ComponentBlocksBundleItemFiltersInput]
}

input ComponentBlocksBundleItemInput {
  bundle: ID
  id: ID
}

type ComponentBlocksButtonLink {
  id: ID!
  label: String!
  page: PageEntityResponse
}

input ComponentBlocksButtonLinkFiltersInput {
  and: [ComponentBlocksButtonLinkFiltersInput]
  label: StringFilterInput
  not: ComponentBlocksButtonLinkFiltersInput
  or: [ComponentBlocksButtonLinkFiltersInput]
  page: PageFiltersInput
}

input ComponentBlocksButtonLinkInput {
  id: ID
  label: String
  page: ID
}

type ComponentBlocksContactItem {
  contact: ContactEntityResponse
  id: ID!
}

input ComponentBlocksContactItemFiltersInput {
  and: [ComponentBlocksContactItemFiltersInput]
  contact: ContactFiltersInput
  not: ComponentBlocksContactItemFiltersInput
  or: [ComponentBlocksContactItemFiltersInput]
}

input ComponentBlocksContactItemInput {
  contact: ID
  id: ID
}

type ComponentBlocksCta {
  button: ComponentBlocksButtonLink
  description: String
  id: ID!
  image: UploadFileEntityResponse
  title: String!
}

input ComponentBlocksCtaFiltersInput {
  and: [ComponentBlocksCtaFiltersInput]
  button: ComponentBlocksButtonLinkFiltersInput
  description: StringFilterInput
  not: ComponentBlocksCtaFiltersInput
  or: [ComponentBlocksCtaFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksCtaInput {
  button: ComponentBlocksButtonLinkInput
  description: String
  id: ID
  image: ID
  title: String
}

type ComponentBlocksDocumentItem {
  document: DocumentEntityResponse
  id: ID!
}

input ComponentBlocksDocumentItemFiltersInput {
  and: [ComponentBlocksDocumentItemFiltersInput]
  document: DocumentFiltersInput
  not: ComponentBlocksDocumentItemFiltersInput
  or: [ComponentBlocksDocumentItemFiltersInput]
}

input ComponentBlocksDocumentItemInput {
  document: ID
  id: ID
}

type ComponentBlocksOfficeItem {
  id: ID!
  office: OfficeEntityResponse
}

input ComponentBlocksOfficeItemFiltersInput {
  and: [ComponentBlocksOfficeItemFiltersInput]
  not: ComponentBlocksOfficeItemFiltersInput
  office: OfficeFiltersInput
  or: [ComponentBlocksOfficeItemFiltersInput]
}

input ComponentBlocksOfficeItemInput {
  id: ID
  office: ID
}

type ComponentBlocksOpeningHoursItem {
  id: ID!
  label: String
  time: String
}

input ComponentBlocksOpeningHoursItemFiltersInput {
  and: [ComponentBlocksOpeningHoursItemFiltersInput]
  label: StringFilterInput
  not: ComponentBlocksOpeningHoursItemFiltersInput
  or: [ComponentBlocksOpeningHoursItemFiltersInput]
  time: StringFilterInput
}

input ComponentBlocksOpeningHoursItemInput {
  id: ID
  label: String
  time: String
}

type ComponentBlocksOpeningHoursUniversal {
  days(filters: ComponentBlocksOpeningHoursItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksOpeningHoursItem]
  id: ID!
}

input ComponentBlocksOpeningHoursUniversalFiltersInput {
  and: [ComponentBlocksOpeningHoursUniversalFiltersInput]
  days: ComponentBlocksOpeningHoursItemFiltersInput
  not: ComponentBlocksOpeningHoursUniversalFiltersInput
  or: [ComponentBlocksOpeningHoursUniversalFiltersInput]
}

input ComponentBlocksOpeningHoursUniversalInput {
  days: [ComponentBlocksOpeningHoursItemInput]
  id: ID
}

type ComponentBlocksPageItem {
  id: ID!
  page: PageEntityResponse
}

input ComponentBlocksPageItemFiltersInput {
  and: [ComponentBlocksPageItemFiltersInput]
  not: ComponentBlocksPageItemFiltersInput
  or: [ComponentBlocksPageItemFiltersInput]
  page: PageFiltersInput
}

input ComponentBlocksPageItemInput {
  id: ID
  page: ID
}

type ComponentBlocksPriceListItem {
  id: ID!
  label: String
  price: Float
}

input ComponentBlocksPriceListItemFiltersInput {
  and: [ComponentBlocksPriceListItemFiltersInput]
  label: StringFilterInput
  not: ComponentBlocksPriceListItemFiltersInput
  or: [ComponentBlocksPriceListItemFiltersInput]
  price: FloatFilterInput
}

input ComponentBlocksPriceListItemInput {
  id: ID
  label: String
  price: Float
}

type ComponentBlocksSidebar {
  contact: ContactEntityResponse
  ctaButton: ComponentBlocksButtonLink
  id: ID!
  text: String
  title: String
}

input ComponentBlocksSidebarFiltersInput {
  and: [ComponentBlocksSidebarFiltersInput]
  contact: ContactFiltersInput
  ctaButton: ComponentBlocksButtonLinkFiltersInput
  not: ComponentBlocksSidebarFiltersInput
  or: [ComponentBlocksSidebarFiltersInput]
  text: StringFilterInput
  title: StringFilterInput
}

input ComponentBlocksSidebarInput {
  contact: ID
  ctaButton: ComponentBlocksButtonLinkInput
  id: ID
  text: String
  title: String
}

type ComponentBlocksSimpleCtaItem {
  button: ComponentBlocksButtonLink
  description: String
  id: ID!
  title: String!
}

input ComponentBlocksSimpleCtaItemFiltersInput {
  and: [ComponentBlocksSimpleCtaItemFiltersInput]
  button: ComponentBlocksButtonLinkFiltersInput
  description: StringFilterInput
  not: ComponentBlocksSimpleCtaItemFiltersInput
  or: [ComponentBlocksSimpleCtaItemFiltersInput]
  title: StringFilterInput
}

input ComponentBlocksSimpleCtaItemInput {
  button: ComponentBlocksButtonLinkInput
  description: String
  id: ID
  title: String
}

type ComponentBlocksSocialItem {
  icon: ENUM_COMPONENTBLOCKSSOCIALITEM_ICON
  id: ID!
  title: String!
  url: String!
}

input ComponentBlocksSocialItemFiltersInput {
  and: [ComponentBlocksSocialItemFiltersInput]
  icon: StringFilterInput
  not: ComponentBlocksSocialItemFiltersInput
  or: [ComponentBlocksSocialItemFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentBlocksSocialItemInput {
  icon: ENUM_COMPONENTBLOCKSSOCIALITEM_ICON
  id: ID
  title: String
  url: String
}

type ComponentGeneralContacts {
  address: String
  addressFirstLine: String
  contact: ContactEntityResponse
  contactsPage: PageEntityResponse
  id: ID!
  latitude: String
  longitude: String
  navigateToLink: String
  openingHoursPage: PageEntityResponse
}

input ComponentGeneralContactsFiltersInput {
  address: StringFilterInput
  addressFirstLine: StringFilterInput
  and: [ComponentGeneralContactsFiltersInput]
  contact: ContactFiltersInput
  contactsPage: PageFiltersInput
  latitude: StringFilterInput
  longitude: StringFilterInput
  navigateToLink: StringFilterInput
  not: ComponentGeneralContactsFiltersInput
  openingHoursPage: PageFiltersInput
  or: [ComponentGeneralContactsFiltersInput]
}

input ComponentGeneralContactsInput {
  address: String
  addressFirstLine: String
  contact: ID
  contactsPage: ID
  id: ID
  latitude: String
  longitude: String
  navigateToLink: String
  openingHoursPage: ID
}

type ComponentGeneralFooter {
  bottomLinks(filters: ComponentBlocksButtonLinkFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksButtonLink]
  id: ID!
  links1(filters: ComponentGeneralLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralLinkItem]
  links2(filters: ComponentGeneralLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralLinkItem]
  links3(filters: ComponentGeneralLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralLinkItem]
  links4(filters: ComponentGeneralLinkItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralLinkItem]
  title1: String
  title2: String
  title3: String
  title4: String
}

input ComponentGeneralFooterFiltersInput {
  and: [ComponentGeneralFooterFiltersInput]
  bottomLinks: ComponentBlocksButtonLinkFiltersInput
  links1: ComponentGeneralLinkItemFiltersInput
  links2: ComponentGeneralLinkItemFiltersInput
  links3: ComponentGeneralLinkItemFiltersInput
  links4: ComponentGeneralLinkItemFiltersInput
  not: ComponentGeneralFooterFiltersInput
  or: [ComponentGeneralFooterFiltersInput]
  title1: StringFilterInput
  title2: StringFilterInput
  title3: StringFilterInput
  title4: StringFilterInput
}

input ComponentGeneralFooterInput {
  bottomLinks: [ComponentBlocksButtonLinkInput]
  id: ID
  links1: [ComponentGeneralLinkItemInput]
  links2: [ComponentGeneralLinkItemInput]
  links3: [ComponentGeneralLinkItemInput]
  links4: [ComponentGeneralLinkItemInput]
  title1: String
  title2: String
  title3: String
  title4: String
}

type ComponentGeneralHeader {
  contact: ContactEntityResponse
  faqPage: PageEntityResponse
  id: ID!
}

input ComponentGeneralHeaderFiltersInput {
  and: [ComponentGeneralHeaderFiltersInput]
  contact: ContactFiltersInput
  faqPage: PageFiltersInput
  not: ComponentGeneralHeaderFiltersInput
  or: [ComponentGeneralHeaderFiltersInput]
}

input ComponentGeneralHeaderInput {
  contact: ID
  faqPage: ID
  id: ID
}

type ComponentGeneralLinkItem {
  id: ID!
  label: String!
  page: PageEntityResponse
  targetBlank: Boolean!
  url: String
}

input ComponentGeneralLinkItemFiltersInput {
  and: [ComponentGeneralLinkItemFiltersInput]
  label: StringFilterInput
  not: ComponentGeneralLinkItemFiltersInput
  or: [ComponentGeneralLinkItemFiltersInput]
  page: PageFiltersInput
  targetBlank: BooleanFilterInput
  url: StringFilterInput
}

input ComponentGeneralLinkItemInput {
  id: ID
  label: String
  page: ID
  targetBlank: Boolean
  url: String
}

type ComponentGeneralProcedure {
  downloadFile: UploadFileEntityResponse
  id: ID!
  steps(filters: ComponentGeneralProcedureItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentGeneralProcedureItem]
  title: String!
}

input ComponentGeneralProcedureFiltersInput {
  and: [ComponentGeneralProcedureFiltersInput]
  not: ComponentGeneralProcedureFiltersInput
  or: [ComponentGeneralProcedureFiltersInput]
  steps: ComponentGeneralProcedureItemFiltersInput
  title: StringFilterInput
}

input ComponentGeneralProcedureInput {
  downloadFile: ID
  id: ID
  steps: [ComponentGeneralProcedureItemInput]
  title: String
}

type ComponentGeneralProcedureItem {
  description: String
  id: ID!
  title: String!
}

input ComponentGeneralProcedureItemFiltersInput {
  and: [ComponentGeneralProcedureItemFiltersInput]
  description: StringFilterInput
  not: ComponentGeneralProcedureItemFiltersInput
  or: [ComponentGeneralProcedureItemFiltersInput]
  title: StringFilterInput
}

input ComponentGeneralProcedureItemInput {
  description: String
  id: ID
  title: String
}

type ComponentGeneralSeo {
  id: ID!
  keywords: String
  metaDescription: String
  metaTitle: String
}

input ComponentGeneralSeoFiltersInput {
  and: [ComponentGeneralSeoFiltersInput]
  keywords: StringFilterInput
  metaDescription: StringFilterInput
  metaTitle: StringFilterInput
  not: ComponentGeneralSeoFiltersInput
  or: [ComponentGeneralSeoFiltersInput]
}

input ComponentGeneralSeoInput {
  id: ID
  keywords: String
  metaDescription: String
  metaTitle: String
}

type ComponentGeneralSocial {
  facebook: String
  id: ID!
  instagram: String
  linkedin: String
  twitter: String
  youtube: String
}

input ComponentGeneralSocialFiltersInput {
  and: [ComponentGeneralSocialFiltersInput]
  facebook: StringFilterInput
  instagram: StringFilterInput
  linkedin: StringFilterInput
  not: ComponentGeneralSocialFiltersInput
  or: [ComponentGeneralSocialFiltersInput]
  twitter: StringFilterInput
  youtube: StringFilterInput
}

input ComponentGeneralSocialInput {
  facebook: String
  id: ID
  instagram: String
  linkedin: String
  twitter: String
  youtube: String
}

type ComponentSectionsAccordionGroup {
  accordions(filters: ComponentBlocksAccordionItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksAccordionItem]
  id: ID!
  title: String
}

input ComponentSectionsAccordionGroupFiltersInput {
  accordions: ComponentBlocksAccordionItemFiltersInput
  and: [ComponentSectionsAccordionGroupFiltersInput]
  not: ComponentSectionsAccordionGroupFiltersInput
  or: [ComponentSectionsAccordionGroupFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsAccordionGroupInput {
  accordions: [ComponentBlocksAccordionItemInput]
  id: ID
  title: String
}

type ComponentSectionsArticleJobsListing {
  id: ID!
}

input ComponentSectionsArticleJobsListingFiltersInput {
  and: [ComponentSectionsArticleJobsListingFiltersInput]
  not: ComponentSectionsArticleJobsListingFiltersInput
  or: [ComponentSectionsArticleJobsListingFiltersInput]
}

input ComponentSectionsArticleJobsListingInput {
  id: ID
}

type ComponentSectionsArticleNewsListing {
  id: ID!
}

input ComponentSectionsArticleNewsListingFiltersInput {
  and: [ComponentSectionsArticleNewsListingFiltersInput]
  not: ComponentSectionsArticleNewsListingFiltersInput
  or: [ComponentSectionsArticleNewsListingFiltersInput]
}

input ComponentSectionsArticleNewsListingInput {
  id: ID
}

type ComponentSectionsArticlePressListing {
  id: ID!
}

input ComponentSectionsArticlePressListingFiltersInput {
  and: [ComponentSectionsArticlePressListingFiltersInput]
  not: ComponentSectionsArticlePressListingFiltersInput
  or: [ComponentSectionsArticlePressListingFiltersInput]
}

input ComponentSectionsArticlePressListingInput {
  id: ID
}

type ComponentSectionsArticlesManualListing {
  articles(filters: ComponentBlocksArticleItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksArticleItem]
  id: ID!
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsArticlesManualListingFiltersInput {
  and: [ComponentSectionsArticlesManualListingFiltersInput]
  articles: ComponentBlocksArticleItemFiltersInput
  not: ComponentSectionsArticlesManualListingFiltersInput
  or: [ComponentSectionsArticlesManualListingFiltersInput]
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsArticlesManualListingInput {
  articles: [ComponentBlocksArticleItemInput]
  id: ID
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type ComponentSectionsBranchGroup {
  branches(filters: ComponentBlocksBranchItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksBranchItem]
  id: ID!
  title: String
}

input ComponentSectionsBranchGroupFiltersInput {
  and: [ComponentSectionsBranchGroupFiltersInput]
  branches: ComponentBlocksBranchItemFiltersInput
  not: ComponentSectionsBranchGroupFiltersInput
  or: [ComponentSectionsBranchGroupFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsBranchGroupInput {
  branches: [ComponentBlocksBranchItemInput]
  id: ID
  title: String
}

type ComponentSectionsBundleListing {
  atMedicalFacility: ComponentBlocksBundleGroup
  description: String
  id: ID!
  outsideMedicalFacility: ComponentBlocksBundleGroup
  title: String
}

input ComponentSectionsBundleListingFiltersInput {
  and: [ComponentSectionsBundleListingFiltersInput]
  atMedicalFacility: ComponentBlocksBundleGroupFiltersInput
  description: StringFilterInput
  not: ComponentSectionsBundleListingFiltersInput
  or: [ComponentSectionsBundleListingFiltersInput]
  outsideMedicalFacility: ComponentBlocksBundleGroupFiltersInput
  title: StringFilterInput
}

input ComponentSectionsBundleListingInput {
  atMedicalFacility: ComponentBlocksBundleGroupInput
  description: String
  id: ID
  outsideMedicalFacility: ComponentBlocksBundleGroupInput
  title: String
}

type ComponentSectionsBundleListingSimple {
  bundles(filters: BundleFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BundleRelationResponseCollection
  description: String
  id: ID!
  title: String
}

input ComponentSectionsBundleListingSimpleFiltersInput {
  and: [ComponentSectionsBundleListingSimpleFiltersInput]
  bundles: BundleFiltersInput
  description: StringFilterInput
  not: ComponentSectionsBundleListingSimpleFiltersInput
  or: [ComponentSectionsBundleListingSimpleFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsBundleListingSimpleInput {
  bundles: [ID]
  description: String
  id: ID
  title: String
}

type ComponentSectionsCemeteriesOpeningHours {
  buttonPosition: ENUM_COMPONENTSECTIONSCEMETERIESOPENINGHOURS_BUTTONPOSITION
  id: ID!
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsCemeteriesOpeningHoursFiltersInput {
  and: [ComponentSectionsCemeteriesOpeningHoursFiltersInput]
  buttonPosition: StringFilterInput
  not: ComponentSectionsCemeteriesOpeningHoursFiltersInput
  or: [ComponentSectionsCemeteriesOpeningHoursFiltersInput]
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsCemeteriesOpeningHoursInput {
  buttonPosition: ENUM_COMPONENTSECTIONSCEMETERIESOPENINGHOURS_BUTTONPOSITION
  id: ID
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type ComponentSectionsCeremoniesArchiveSection {
  id: ID!
}

input ComponentSectionsCeremoniesArchiveSectionFiltersInput {
  and: [ComponentSectionsCeremoniesArchiveSectionFiltersInput]
  not: ComponentSectionsCeremoniesArchiveSectionFiltersInput
  or: [ComponentSectionsCeremoniesArchiveSectionFiltersInput]
}

input ComponentSectionsCeremoniesArchiveSectionInput {
  id: ID
}

type ComponentSectionsCeremoniesSection {
  archive: ComponentBlocksBlocksCeremonyArchiveBlock
  id: ID!
}

input ComponentSectionsCeremoniesSectionFiltersInput {
  and: [ComponentSectionsCeremoniesSectionFiltersInput]
  archive: ComponentBlocksBlocksCeremonyArchiveBlockFiltersInput
  not: ComponentSectionsCeremoniesSectionFiltersInput
  or: [ComponentSectionsCeremoniesSectionFiltersInput]
}

input ComponentSectionsCeremoniesSectionInput {
  archive: ComponentBlocksBlocksCeremonyArchiveBlockInput
  id: ID
}

type ComponentSectionsContactGroup {
  contacts(filters: ComponentBlocksContactItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksContactItem]
  id: ID!
  layout: ENUM_COMPONENTSECTIONSCONTACTGROUP_LAYOUT!
  title: String
}

input ComponentSectionsContactGroupFiltersInput {
  and: [ComponentSectionsContactGroupFiltersInput]
  contacts: ComponentBlocksContactItemFiltersInput
  layout: StringFilterInput
  not: ComponentSectionsContactGroupFiltersInput
  or: [ComponentSectionsContactGroupFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsContactGroupInput {
  contacts: [ComponentBlocksContactItemInput]
  id: ID
  layout: ENUM_COMPONENTSECTIONSCONTACTGROUP_LAYOUT
  title: String
}

type ComponentSectionsCtaSection {
  ctas(filters: ComponentBlocksSimpleCtaItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksSimpleCtaItem]
  id: ID!
  title: String
}

input ComponentSectionsCtaSectionFiltersInput {
  and: [ComponentSectionsCtaSectionFiltersInput]
  ctas: ComponentBlocksSimpleCtaItemFiltersInput
  not: ComponentSectionsCtaSectionFiltersInput
  or: [ComponentSectionsCtaSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsCtaSectionInput {
  ctas: [ComponentBlocksSimpleCtaItemInput]
  id: ID
  title: String
}

type ComponentSectionsDebtorsSection {
  description: String
  id: ID!
}

input ComponentSectionsDebtorsSectionFiltersInput {
  and: [ComponentSectionsDebtorsSectionFiltersInput]
  description: StringFilterInput
  not: ComponentSectionsDebtorsSectionFiltersInput
  or: [ComponentSectionsDebtorsSectionFiltersInput]
}

input ComponentSectionsDebtorsSectionInput {
  description: String
  id: ID
}

type ComponentSectionsDisclosuresSection {
  id: ID!
}

input ComponentSectionsDisclosuresSectionFiltersInput {
  and: [ComponentSectionsDisclosuresSectionFiltersInput]
  not: ComponentSectionsDisclosuresSectionFiltersInput
  or: [ComponentSectionsDisclosuresSectionFiltersInput]
}

input ComponentSectionsDisclosuresSectionInput {
  id: ID
}

type ComponentSectionsDivider {
  color: ENUM_COMPONENTSECTIONSDIVIDER_COLOR!
  id: ID!
}

input ComponentSectionsDividerFiltersInput {
  and: [ComponentSectionsDividerFiltersInput]
  color: StringFilterInput
  not: ComponentSectionsDividerFiltersInput
  or: [ComponentSectionsDividerFiltersInput]
}

input ComponentSectionsDividerInput {
  color: ENUM_COMPONENTSECTIONSDIVIDER_COLOR
  id: ID
}

type ComponentSectionsDocumentGroup {
  documents(filters: ComponentBlocksDocumentItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksDocumentItem]
  id: ID!
  title: String
}

input ComponentSectionsDocumentGroupFiltersInput {
  and: [ComponentSectionsDocumentGroupFiltersInput]
  documents: ComponentBlocksDocumentItemFiltersInput
  not: ComponentSectionsDocumentGroupFiltersInput
  or: [ComponentSectionsDocumentGroupFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsDocumentGroupInput {
  documents: [ComponentBlocksDocumentItemInput]
  id: ID
  title: String
}

type ComponentSectionsDocumentsSection {
  id: ID!
}

input ComponentSectionsDocumentsSectionFiltersInput {
  and: [ComponentSectionsDocumentsSectionFiltersInput]
  not: ComponentSectionsDocumentsSectionFiltersInput
  or: [ComponentSectionsDocumentsSectionFiltersInput]
}

input ComponentSectionsDocumentsSectionInput {
  id: ID
}

type ComponentSectionsGallery {
  id: ID!
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  title: String
}

input ComponentSectionsGalleryFiltersInput {
  and: [ComponentSectionsGalleryFiltersInput]
  not: ComponentSectionsGalleryFiltersInput
  or: [ComponentSectionsGalleryFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsGalleryInput {
  id: ID
  medias: [ID]
  title: String
}

type ComponentSectionsHomepageReviewsSection {
  id: ID!
  reviews(filters: ReviewFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewRelationResponseCollection
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsHomepageReviewsSectionFiltersInput {
  and: [ComponentSectionsHomepageReviewsSectionFiltersInput]
  not: ComponentSectionsHomepageReviewsSectionFiltersInput
  or: [ComponentSectionsHomepageReviewsSectionFiltersInput]
  reviews: ReviewFiltersInput
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsHomepageReviewsSectionInput {
  id: ID
  reviews: [ID]
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type ComponentSectionsIframeSection {
  body: String
  id: ID!
  iframeTitle: String!
  title: String
  url: String!
}

input ComponentSectionsIframeSectionFiltersInput {
  and: [ComponentSectionsIframeSectionFiltersInput]
  body: StringFilterInput
  iframeTitle: StringFilterInput
  not: ComponentSectionsIframeSectionFiltersInput
  or: [ComponentSectionsIframeSectionFiltersInput]
  title: StringFilterInput
  url: StringFilterInput
}

input ComponentSectionsIframeSectionInput {
  body: String
  id: ID
  iframeTitle: String
  title: String
  url: String
}

type ComponentSectionsManualListing {
  id: ID!
  pages(filters: ComponentBlocksPageItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksPageItem]
  showMoreButton: ComponentBlocksButtonLink
  style: ENUM_COMPONENTSECTIONSMANUALLISTING_STYLE!
  title: String
}

input ComponentSectionsManualListingFiltersInput {
  and: [ComponentSectionsManualListingFiltersInput]
  not: ComponentSectionsManualListingFiltersInput
  or: [ComponentSectionsManualListingFiltersInput]
  pages: ComponentBlocksPageItemFiltersInput
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  style: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsManualListingInput {
  id: ID
  pages: [ComponentBlocksPageItemInput]
  showMoreButton: ComponentBlocksButtonLinkInput
  style: ENUM_COMPONENTSECTIONSMANUALLISTING_STYLE
  title: String
}

type ComponentSectionsMapOfManagedObjects {
  id: ID!
  title: String
}

input ComponentSectionsMapOfManagedObjectsFiltersInput {
  and: [ComponentSectionsMapOfManagedObjectsFiltersInput]
  not: ComponentSectionsMapOfManagedObjectsFiltersInput
  or: [ComponentSectionsMapOfManagedObjectsFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsMapOfManagedObjectsInput {
  id: ID
  title: String
}

type ComponentSectionsMapSection {
  id: ID!
  title: String
}

input ComponentSectionsMapSectionFiltersInput {
  and: [ComponentSectionsMapSectionFiltersInput]
  not: ComponentSectionsMapSectionFiltersInput
  or: [ComponentSectionsMapSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsMapSectionInput {
  id: ID
  title: String
}

type ComponentSectionsMenuListing {
  id: ID!
  slug: String!
  title: String
}

input ComponentSectionsMenuListingFiltersInput {
  and: [ComponentSectionsMenuListingFiltersInput]
  not: ComponentSectionsMenuListingFiltersInput
  or: [ComponentSectionsMenuListingFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
}

input ComponentSectionsMenuListingInput {
  id: ID
  slug: String
  title: String
}

type ComponentSectionsNewsListing {
  id: ID!
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsNewsListingFiltersInput {
  and: [ComponentSectionsNewsListingFiltersInput]
  not: ComponentSectionsNewsListingFiltersInput
  or: [ComponentSectionsNewsListingFiltersInput]
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsNewsListingInput {
  id: ID
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type ComponentSectionsOpeningHoursSection {
  id: ID!
  offices(filters: ComponentBlocksOfficeItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksOfficeItem]
  title: String
}

input ComponentSectionsOpeningHoursSectionFiltersInput {
  and: [ComponentSectionsOpeningHoursSectionFiltersInput]
  not: ComponentSectionsOpeningHoursSectionFiltersInput
  offices: ComponentBlocksOfficeItemFiltersInput
  or: [ComponentSectionsOpeningHoursSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsOpeningHoursSectionInput {
  id: ID
  offices: [ComponentBlocksOfficeItemInput]
  title: String
}

type ComponentSectionsPartnersSection {
  featuredPartnersTitle: String!
  id: ID!
  otherPartnersTitle: String!
}

input ComponentSectionsPartnersSectionFiltersInput {
  and: [ComponentSectionsPartnersSectionFiltersInput]
  featuredPartnersTitle: StringFilterInput
  not: ComponentSectionsPartnersSectionFiltersInput
  or: [ComponentSectionsPartnersSectionFiltersInput]
  otherPartnersTitle: StringFilterInput
}

input ComponentSectionsPartnersSectionInput {
  featuredPartnersTitle: String
  id: ID
  otherPartnersTitle: String
}

type ComponentSectionsProceduresSection {
  id: ID!
  title: String
}

input ComponentSectionsProceduresSectionFiltersInput {
  and: [ComponentSectionsProceduresSectionFiltersInput]
  not: ComponentSectionsProceduresSectionFiltersInput
  or: [ComponentSectionsProceduresSectionFiltersInput]
  title: StringFilterInput
}

input ComponentSectionsProceduresSectionInput {
  id: ID
  title: String
}

type ComponentSectionsProceduresShortSection {
  id: ID!
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsProceduresShortSectionFiltersInput {
  and: [ComponentSectionsProceduresShortSectionFiltersInput]
  not: ComponentSectionsProceduresShortSectionFiltersInput
  or: [ComponentSectionsProceduresShortSectionFiltersInput]
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsProceduresShortSectionInput {
  id: ID
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type ComponentSectionsPublicDisclosureSection {
  id: ID!
}

input ComponentSectionsPublicDisclosureSectionFiltersInput {
  and: [ComponentSectionsPublicDisclosureSectionFiltersInput]
  not: ComponentSectionsPublicDisclosureSectionFiltersInput
  or: [ComponentSectionsPublicDisclosureSectionFiltersInput]
}

input ComponentSectionsPublicDisclosureSectionInput {
  id: ID
}

type ComponentSectionsReviewListing {
  id: ID!
}

input ComponentSectionsReviewListingFiltersInput {
  and: [ComponentSectionsReviewListingFiltersInput]
  not: ComponentSectionsReviewListingFiltersInput
  or: [ComponentSectionsReviewListingFiltersInput]
}

input ComponentSectionsReviewListingInput {
  id: ID
}

type ComponentSectionsRichtext {
  button: ComponentBlocksButtonLink
  content: String
  id: ID!
}

input ComponentSectionsRichtextFiltersInput {
  and: [ComponentSectionsRichtextFiltersInput]
  button: ComponentBlocksButtonLinkFiltersInput
  content: StringFilterInput
  not: ComponentSectionsRichtextFiltersInput
  or: [ComponentSectionsRichtextFiltersInput]
}

input ComponentSectionsRichtextInput {
  button: ComponentBlocksButtonLinkInput
  content: String
  id: ID
}

type ComponentSectionsUpcomingCeremoniesSection {
  id: ID!
  showMoreButton: ComponentBlocksButtonLink
  title: String
}

input ComponentSectionsUpcomingCeremoniesSectionFiltersInput {
  and: [ComponentSectionsUpcomingCeremoniesSectionFiltersInput]
  not: ComponentSectionsUpcomingCeremoniesSectionFiltersInput
  or: [ComponentSectionsUpcomingCeremoniesSectionFiltersInput]
  showMoreButton: ComponentBlocksButtonLinkFiltersInput
  title: StringFilterInput
}

input ComponentSectionsUpcomingCeremoniesSectionInput {
  id: ID
  showMoreButton: ComponentBlocksButtonLinkInput
  title: String
}

type Contact {
  createdAt: DateTime
  email: String
  locale: String
  localizations(filters: ContactFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContactRelationResponseCollection
  phone1: String
  phone2: String
  position: String
  title: String!
  updatedAt: DateTime
}

type ContactEntity {
  attributes: Contact
  id: ID
}

type ContactEntityResponse {
  data: ContactEntity
}

type ContactEntityResponseCollection {
  data: [ContactEntity!]!
  meta: ResponseCollectionMeta!
}

input ContactFiltersInput {
  and: [ContactFiltersInput]
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ContactFiltersInput
  not: ContactFiltersInput
  or: [ContactFiltersInput]
  phone1: StringFilterInput
  phone2: StringFilterInput
  position: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ContactInput {
  email: String
  phone1: String
  phone2: String
  position: String
  title: String
}

type ContactRelationResponseCollection {
  data: [ContactEntity!]!
}

type ContentTypes {
  available: Boolean!
  collectionName: String!
  contentTypeName: String!
  endpoint: String!
  isSingle: Boolean!
  label: String!
  labelSingular: String!
  name: String!
  relatedField: String!
  uid: String!
  visible: Boolean!
}

type ContentTypesNameFields {
  default: [String!]!
}

input CreateNavigation {
  items: [CreateNavigationItem]!
  name: String!
}

input CreateNavigationItem {
  audience: [String]
  externalPath: String
  items: [CreateNavigationItem]
  master: Int
  menuAttached: Boolean!
  order: Int!
  parent: Int
  path: String
  related: CreateNavigationRelated
  title: String!
  type: String!
  uiRouterKey: String!
}

input CreateNavigationRelated {
  field: String!
  ref: String!
  refId: String!
}

"""
A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

input DateFilterInput {
  and: [Date]
  between: [Date]
  contains: Date
  containsi: Date
  endsWith: Date
  eq: Date
  eqi: Date
  gt: Date
  gte: Date
  in: [Date]
  lt: Date
  lte: Date
  ne: Date
  not: DateFilterInput
  notContains: Date
  notContainsi: Date
  notIn: [Date]
  notNull: Boolean
  null: Boolean
  or: [Date]
  startsWith: Date
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFilterInput {
  and: [DateTime]
  between: [DateTime]
  contains: DateTime
  containsi: DateTime
  endsWith: DateTime
  eq: DateTime
  eqi: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  ne: DateTime
  not: DateTimeFilterInput
  notContains: DateTime
  notContainsi: DateTime
  notIn: [DateTime]
  notNull: Boolean
  null: Boolean
  or: [DateTime]
  startsWith: DateTime
}

type Debtor {
  birthDate: String
  cemetery: CemeteryEntityResponse
  createdAt: DateTime
  deathDate: String
  firstName: String
  graveNumber: String
  gravePreviousNumber: String
  graveSector: String
  lastName: String
  updatedAt: DateTime
}

type DebtorEntity {
  attributes: Debtor
  id: ID
}

type DebtorEntityResponse {
  data: DebtorEntity
}

type DebtorEntityResponseCollection {
  data: [DebtorEntity!]!
  meta: ResponseCollectionMeta!
}

input DebtorFiltersInput {
  and: [DebtorFiltersInput]
  birthDate: StringFilterInput
  cemetery: CemeteryFiltersInput
  createdAt: DateTimeFilterInput
  deathDate: StringFilterInput
  firstName: StringFilterInput
  graveNumber: StringFilterInput
  gravePreviousNumber: StringFilterInput
  graveSector: StringFilterInput
  id: IDFilterInput
  importId: StringFilterInput
  lastName: StringFilterInput
  not: DebtorFiltersInput
  or: [DebtorFiltersInput]
  updatedAt: DateTimeFilterInput
}

input DebtorInput {
  birthDate: String
  cemetery: ID
  deathDate: String
  firstName: String
  graveNumber: String
  gravePreviousNumber: String
  graveSector: String
  importId: String
  lastName: String
}

type DebtorRelationResponseCollection {
  data: [DebtorEntity!]!
}

type Disclosure {
  additionalData: JSON
  contractNumber: String
  createdAt: DateTime
  dateOfDelivery: String
  dateOfOrder: String
  description: String
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  internalInvoiceNumber: String
  invoiceNumberOrVariableSymbol: String
  invoicedAmount: String
  orderNumber: String
  publishedAtOverride: DateTime
  signedBy: String
  supplierAddress: String
  supplierName: String
  supplierRegistrationNumber: String
  totalValue: String
  type: ENUM_DISCLOSURE_TYPE
  updatedAt: DateTime
}

type DisclosureEntity {
  attributes: Disclosure
  id: ID
}

type DisclosureEntityResponse {
  data: DisclosureEntity
}

type DisclosureEntityResponseCollection {
  data: [DisclosureEntity!]!
  meta: ResponseCollectionMeta!
}

input DisclosureFiltersInput {
  additionalData: JSONFilterInput
  and: [DisclosureFiltersInput]
  contractNumber: StringFilterInput
  createdAt: DateTimeFilterInput
  dateOfDelivery: StringFilterInput
  dateOfOrder: StringFilterInput
  description: StringFilterInput
  id: IDFilterInput
  importId: StringFilterInput
  internalInvoiceNumber: StringFilterInput
  invoiceNumberOrVariableSymbol: StringFilterInput
  invoicedAmount: StringFilterInput
  not: DisclosureFiltersInput
  or: [DisclosureFiltersInput]
  orderNumber: StringFilterInput
  publishedAtOverride: DateTimeFilterInput
  signedBy: StringFilterInput
  supplierAddress: StringFilterInput
  supplierName: StringFilterInput
  supplierRegistrationNumber: StringFilterInput
  totalValue: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DisclosureInput {
  additionalData: JSON
  contractNumber: String
  dateOfDelivery: String
  dateOfOrder: String
  description: String
  files: [ID]
  importId: String
  internalInvoiceNumber: String
  invoiceNumberOrVariableSymbol: String
  invoicedAmount: String
  orderNumber: String
  publishedAtOverride: DateTime
  signedBy: String
  supplierAddress: String
  supplierName: String
  supplierRegistrationNumber: String
  totalValue: String
  type: ENUM_DISCLOSURE_TYPE
}

type DisclosureRelationResponseCollection {
  data: [DisclosureEntity!]!
}

type Document {
  createdAt: DateTime
  description: String
  documentCategory: DocumentCategoryEntityResponse
  file: UploadFileEntityResponse!
  publishedAt: DateTime
  seo: ComponentGeneralSeo
  slug: String!
  title: String!
  updatedAt: DateTime
}

type DocumentCategory {
  createdAt: DateTime
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentRelationResponseCollection
  slug: String!
  title: String!
  updatedAt: DateTime
}

type DocumentCategoryEntity {
  attributes: DocumentCategory
  id: ID
}

type DocumentCategoryEntityResponse {
  data: DocumentCategoryEntity
}

type DocumentCategoryEntityResponseCollection {
  data: [DocumentCategoryEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentCategoryFiltersInput {
  and: [DocumentCategoryFiltersInput]
  createdAt: DateTimeFilterInput
  documents: DocumentFiltersInput
  id: IDFilterInput
  not: DocumentCategoryFiltersInput
  or: [DocumentCategoryFiltersInput]
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentCategoryInput {
  documents: [ID]
  slug: String
  title: String
}

type DocumentCategoryRelationResponseCollection {
  data: [DocumentCategoryEntity!]!
}

type DocumentEntity {
  attributes: Document
  id: ID
}

type DocumentEntityResponse {
  data: DocumentEntity
}

type DocumentEntityResponseCollection {
  data: [DocumentEntity!]!
  meta: ResponseCollectionMeta!
}

input DocumentFiltersInput {
  and: [DocumentFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  documentCategory: DocumentCategoryFiltersInput
  id: IDFilterInput
  not: DocumentFiltersInput
  or: [DocumentFiltersInput]
  publishedAt: DateTimeFilterInput
  seo: ComponentGeneralSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input DocumentInput {
  description: String
  documentCategory: ID
  file: ID
  publishedAt: DateTime
  seo: ComponentGeneralSeoInput
  slug: String
  title: String
}

type DocumentRelationResponseCollection {
  data: [DocumentEntity!]!
}

enum ENUM_BUNDLE_TYPE {
  kremacia
  pochovanie
  prirodne
}

enum ENUM_CEMETERY_TYPE {
  civilny
  historicky
  vojensky
}

enum ENUM_COMPONENTBLOCKSSOCIALITEM_ICON {
  facebook
  instagram
  linkedin
  twitter
  youtube
}

enum ENUM_COMPONENTSECTIONSCEMETERIESOPENINGHOURS_BUTTONPOSITION {
  below
  standard
}

enum ENUM_COMPONENTSECTIONSCONTACTGROUP_LAYOUT {
  condensed
  default
}

enum ENUM_COMPONENTSECTIONSDIVIDER_COLOR {
  default
  primary
}

enum ENUM_COMPONENTSECTIONSMANUALLISTING_STYLE {
  service
  simple
}

enum ENUM_DISCLOSURE_TYPE {
  Faktura
  Objednavka
  Zmluva
}

enum ENUM_MANAGEDOBJECT_TYPE {
  fontana
  hmlova_fontana
  pitna_fontana
  rozprasovac
  studna
}

enum ENUM_PAGE_LAYOUT {
  centered
  fullwidth
  sidebar
}

type Error {
  code: String!
  message: String
}

input FileInfoInput {
  alternativeText: String
  caption: String
  name: String
}

input FloatFilterInput {
  and: [Float]
  between: [Float]
  contains: Float
  containsi: Float
  endsWith: Float
  eq: Float
  eqi: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  ne: Float
  not: FloatFilterInput
  notContains: Float
  notContainsi: Float
  notIn: [Float]
  notNull: Boolean
  null: Boolean
  or: [Float]
  startsWith: Float
}

type General {
  address: ComponentGeneralContacts
  cemeteryOpeningHours: ComponentBlocksOpeningHoursUniversal
  createdAt: DateTime
  footer: ComponentGeneralFooter
  header: ComponentGeneralHeader
  locale: String
  localizations: GeneralRelationResponseCollection
  socials(filters: ComponentBlocksSocialItemFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksSocialItem]
  updatedAt: DateTime
}

type GeneralEntity {
  attributes: General
  id: ID
}

type GeneralEntityResponse {
  data: GeneralEntity
}

type GeneralEntityResponseCollection {
  data: [GeneralEntity!]!
  meta: ResponseCollectionMeta!
}

input GeneralFiltersInput {
  address: ComponentGeneralContactsFiltersInput
  and: [GeneralFiltersInput]
  cemeteryOpeningHours: ComponentBlocksOpeningHoursUniversalFiltersInput
  createdAt: DateTimeFilterInput
  footer: ComponentGeneralFooterFiltersInput
  header: ComponentGeneralHeaderFiltersInput
  locale: StringFilterInput
  localizations: GeneralFiltersInput
  not: GeneralFiltersInput
  or: [GeneralFiltersInput]
  socials: ComponentBlocksSocialItemFiltersInput
  updatedAt: DateTimeFilterInput
}

input GeneralInput {
  address: ComponentGeneralContactsInput
  cemeteryOpeningHours: ComponentBlocksOpeningHoursUniversalInput
  footer: ComponentGeneralFooterInput
  header: ComponentGeneralHeaderInput
  socials: [ComponentBlocksSocialItemInput]
}

type GeneralRelationResponseCollection {
  data: [GeneralEntity!]!
}

union GenericMorph = Application | Article | ArticleJobsCategory | ArticleNewsCategory | ArticlePressCategory | Branch | Bundle | Cemetery | Ceremony | ComponentBlocksAccordionItem | ComponentBlocksAccordionItemWithPrice | ComponentBlocksArticleItem | ComponentBlocksBlocksCeremonyArchiveBlock | ComponentBlocksBranchItem | ComponentBlocksBundleContentItem | ComponentBlocksBundleGroup | ComponentBlocksBundleItem | ComponentBlocksButtonLink | ComponentBlocksContactItem | ComponentBlocksCta | ComponentBlocksDocumentItem | ComponentBlocksOfficeItem | ComponentBlocksOpeningHoursItem | ComponentBlocksOpeningHoursUniversal | ComponentBlocksPageItem | ComponentBlocksPriceListItem | ComponentBlocksSidebar | ComponentBlocksSimpleCtaItem | ComponentBlocksSocialItem | ComponentGeneralContacts | ComponentGeneralFooter | ComponentGeneralHeader | ComponentGeneralLinkItem | ComponentGeneralProcedure | ComponentGeneralProcedureItem | ComponentGeneralSeo | ComponentGeneralSocial | ComponentSectionsAccordionGroup | ComponentSectionsArticleJobsListing | ComponentSectionsArticleNewsListing | ComponentSectionsArticlePressListing | ComponentSectionsArticlesManualListing | ComponentSectionsBranchGroup | ComponentSectionsBundleListing | ComponentSectionsBundleListingSimple | ComponentSectionsCemeteriesOpeningHours | ComponentSectionsCeremoniesArchiveSection | ComponentSectionsCeremoniesSection | ComponentSectionsContactGroup | ComponentSectionsCtaSection | ComponentSectionsDebtorsSection | ComponentSectionsDisclosuresSection | ComponentSectionsDivider | ComponentSectionsDocumentGroup | ComponentSectionsDocumentsSection | ComponentSectionsGallery | ComponentSectionsHomepageReviewsSection | ComponentSectionsIframeSection | ComponentSectionsManualListing | ComponentSectionsMapOfManagedObjects | ComponentSectionsMapSection | ComponentSectionsMenuListing | ComponentSectionsNewsListing | ComponentSectionsOpeningHoursSection | ComponentSectionsPartnersSection | ComponentSectionsProceduresSection | ComponentSectionsProceduresShortSection | ComponentSectionsPublicDisclosureSection | ComponentSectionsReviewListing | ComponentSectionsRichtext | ComponentSectionsUpcomingCeremoniesSection | Contact | Debtor | Disclosure | Document | DocumentCategory | General | HomePage | I18NLocale | ManagedObject | Office | Page | Partner | Procedure | Review | UploadFile | UploadFolder | UsersPermissionsPermission | UsersPermissionsRole | UsersPermissionsUser

type HomePage {
  createdAt: DateTime
  featured(filters: ComponentBlocksCtaFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): [ComponentBlocksCta]!
  locale: String
  localizations: HomePageRelationResponseCollection
  sections: [HomePageSectionsDynamicZone]
  seo: ComponentGeneralSeo
  updatedAt: DateTime
}

type HomePageEntity {
  attributes: HomePage
  id: ID
}

type HomePageEntityResponse {
  data: HomePageEntity
}

type HomePageEntityResponseCollection {
  data: [HomePageEntity!]!
  meta: ResponseCollectionMeta!
}

input HomePageFiltersInput {
  and: [HomePageFiltersInput]
  createdAt: DateTimeFilterInput
  featured: ComponentBlocksCtaFiltersInput
  locale: StringFilterInput
  localizations: HomePageFiltersInput
  not: HomePageFiltersInput
  or: [HomePageFiltersInput]
  seo: ComponentGeneralSeoFiltersInput
  updatedAt: DateTimeFilterInput
}

input HomePageInput {
  featured: [ComponentBlocksCtaInput]
  sections: [HomePageSectionsDynamicZoneInput!]
  seo: ComponentGeneralSeoInput
}

type HomePageRelationResponseCollection {
  data: [HomePageEntity!]!
}

union HomePageSectionsDynamicZone = ComponentSectionsArticlesManualListing | ComponentSectionsCtaSection | ComponentSectionsHomepageReviewsSection | ComponentSectionsManualListing | ComponentSectionsNewsListing | ComponentSectionsProceduresShortSection | ComponentSectionsUpcomingCeremoniesSection | Error

scalar HomePageSectionsDynamicZoneInput

type I18NLocale {
  code: String
  createdAt: DateTime
  name: String
  updatedAt: DateTime
}

"""A string used to identify an i18n locale"""
scalar I18NLocaleCode

type I18NLocaleEntity {
  attributes: I18NLocale
  id: ID
}

type I18NLocaleEntityResponse {
  data: I18NLocaleEntity
}

type I18NLocaleEntityResponseCollection {
  data: [I18NLocaleEntity!]!
  meta: ResponseCollectionMeta!
}

input I18NLocaleFiltersInput {
  and: [I18NLocaleFiltersInput]
  code: StringFilterInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: I18NLocaleFiltersInput
  or: [I18NLocaleFiltersInput]
  updatedAt: DateTimeFilterInput
}

input I18NLocaleInput {
  code: String
  name: String
}

type I18NLocaleRelationResponseCollection {
  data: [I18NLocaleEntity!]!
}

input IDFilterInput {
  and: [ID]
  between: [ID]
  contains: ID
  containsi: ID
  endsWith: ID
  eq: ID
  eqi: ID
  gt: ID
  gte: ID
  in: [ID]
  lt: ID
  lte: ID
  ne: ID
  not: IDFilterInput
  notContains: ID
  notContainsi: ID
  notIn: [ID]
  notNull: Boolean
  null: Boolean
  or: [ID]
  startsWith: ID
}

input IntFilterInput {
  and: [Int]
  between: [Int]
  contains: Int
  containsi: Int
  endsWith: Int
  eq: Int
  eqi: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  ne: Int
  not: IntFilterInput
  notContains: Int
  notContainsi: Int
  notIn: [Int]
  notNull: Boolean
  null: Boolean
  or: [Int]
  startsWith: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

input JSONFilterInput {
  and: [JSON]
  between: [JSON]
  contains: JSON
  containsi: JSON
  endsWith: JSON
  eq: JSON
  eqi: JSON
  gt: JSON
  gte: JSON
  in: [JSON]
  lt: JSON
  lte: JSON
  ne: JSON
  not: JSONFilterInput
  notContains: JSON
  notContainsi: JSON
  notIn: [JSON]
  notNull: Boolean
  null: Boolean
  or: [JSON]
  startsWith: JSON
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
"""
scalar Long

input LongFilterInput {
  and: [Long]
  between: [Long]
  contains: Long
  containsi: Long
  endsWith: Long
  eq: Long
  eqi: Long
  gt: Long
  gte: Long
  in: [Long]
  lt: Long
  lte: Long
  ne: Long
  not: LongFilterInput
  notContains: Long
  notContainsi: Long
  notIn: [Long]
  notNull: Boolean
  null: Boolean
  or: [Long]
  startsWith: Long
}

type ManagedObject {
  address: String
  contact: ContactEntityResponse
  createdAt: DateTime
  description: String
  latitude: Float
  locale: String
  localizations(filters: ManagedObjectFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ManagedObjectRelationResponseCollection
  longitude: Float
  medias(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  navigateToLink: String
  seo: ComponentGeneralSeo
  slug: String!
  title: String!
  type: ENUM_MANAGEDOBJECT_TYPE
  updatedAt: DateTime
}

type ManagedObjectEntity {
  attributes: ManagedObject
  id: ID
}

type ManagedObjectEntityResponse {
  data: ManagedObjectEntity
}

type ManagedObjectEntityResponseCollection {
  data: [ManagedObjectEntity!]!
  meta: ResponseCollectionMeta!
}

input ManagedObjectFiltersInput {
  address: StringFilterInput
  and: [ManagedObjectFiltersInput]
  contact: ContactFiltersInput
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  latitude: FloatFilterInput
  locale: StringFilterInput
  localizations: ManagedObjectFiltersInput
  longitude: FloatFilterInput
  navigateToLink: StringFilterInput
  not: ManagedObjectFiltersInput
  or: [ManagedObjectFiltersInput]
  seo: ComponentGeneralSeoFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input ManagedObjectInput {
  address: String
  contact: ID
  description: String
  latitude: Float
  longitude: Float
  medias: [ID]
  navigateToLink: String
  seo: ComponentGeneralSeoInput
  slug: String
  title: String
  type: ENUM_MANAGEDOBJECT_TYPE
}

type ManagedObjectRelationResponseCollection {
  data: [ManagedObjectEntity!]!
}

type Mutation {
  """Change user password. Confirm with the current password."""
  changePassword(currentPassword: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  createApplication(data: ApplicationInput!): ApplicationEntityResponse
  createApplicationCustom(captchaToken: String!, data: JSON!): String
  createArticle(data: ArticleInput!, locale: I18NLocaleCode): ArticleEntityResponse
  createArticleJobsCategory(data: ArticleJobsCategoryInput!): ArticleJobsCategoryEntityResponse
  createArticleLocalization(data: ArticleInput, id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  createArticleNewsCategory(data: ArticleNewsCategoryInput!): ArticleNewsCategoryEntityResponse
  createArticlePressCategory(data: ArticlePressCategoryInput!): ArticlePressCategoryEntityResponse
  createBranch(data: BranchInput!, locale: I18NLocaleCode): BranchEntityResponse
  createBranchLocalization(data: BranchInput, id: ID, locale: I18NLocaleCode): BranchEntityResponse
  createBundle(data: BundleInput!, locale: I18NLocaleCode): BundleEntityResponse
  createBundleLocalization(data: BundleInput, id: ID, locale: I18NLocaleCode): BundleEntityResponse
  createCemetery(data: CemeteryInput!, locale: I18NLocaleCode): CemeteryEntityResponse
  createCemeteryLocalization(data: CemeteryInput, id: ID, locale: I18NLocaleCode): CemeteryEntityResponse
  createCeremony(data: CeremonyInput!): CeremonyEntityResponse
  createContact(data: ContactInput!, locale: I18NLocaleCode): ContactEntityResponse
  createContactLocalization(data: ContactInput, id: ID, locale: I18NLocaleCode): ContactEntityResponse
  createDebtor(data: DebtorInput!): DebtorEntityResponse
  createDisclosure(data: DisclosureInput!): DisclosureEntityResponse
  createDocument(data: DocumentInput!): DocumentEntityResponse
  createDocumentCategory(data: DocumentCategoryInput!): DocumentCategoryEntityResponse
  createGeneralLocalization(data: GeneralInput, id: ID, locale: I18NLocaleCode): GeneralEntityResponse
  createHomePageLocalization(data: HomePageInput, id: ID, locale: I18NLocaleCode): HomePageEntityResponse
  createManagedObject(data: ManagedObjectInput!, locale: I18NLocaleCode): ManagedObjectEntityResponse
  createManagedObjectLocalization(data: ManagedObjectInput, id: ID, locale: I18NLocaleCode): ManagedObjectEntityResponse
  createOffice(data: OfficeInput!, locale: I18NLocaleCode): OfficeEntityResponse
  createOfficeLocalization(data: OfficeInput, id: ID, locale: I18NLocaleCode): OfficeEntityResponse
  createPage(data: PageInput!, locale: I18NLocaleCode): PageEntityResponse
  createPageLocalization(data: PageInput, id: ID, locale: I18NLocaleCode): PageEntityResponse
  createPartner(data: PartnerInput!): PartnerEntityResponse
  createProcedureLocalization(data: ProcedureInput, id: ID, locale: I18NLocaleCode): ProcedureEntityResponse
  createReview(data: ReviewInput!, locale: I18NLocaleCode): ReviewEntityResponse
  createReviewLocalization(data: ReviewInput, id: ID, locale: I18NLocaleCode): ReviewEntityResponse
  createUploadFile(data: UploadFileInput!): UploadFileEntityResponse
  createUploadFolder(data: UploadFolderInput!): UploadFolderEntityResponse

  """Create a new role"""
  createUsersPermissionsRole(data: UsersPermissionsRoleInput!): UsersPermissionsCreateRolePayload

  """Create a new user"""
  createUsersPermissionsUser(data: UsersPermissionsUserInput!): UsersPermissionsUserEntityResponse!
  deleteApplication(id: ID!): ApplicationEntityResponse
  deleteArticle(id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  deleteArticleJobsCategory(id: ID!): ArticleJobsCategoryEntityResponse
  deleteArticleNewsCategory(id: ID!): ArticleNewsCategoryEntityResponse
  deleteArticlePressCategory(id: ID!): ArticlePressCategoryEntityResponse
  deleteBranch(id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  deleteBundle(id: ID!, locale: I18NLocaleCode): BundleEntityResponse
  deleteCemetery(id: ID!, locale: I18NLocaleCode): CemeteryEntityResponse
  deleteCeremony(id: ID!): CeremonyEntityResponse
  deleteContact(id: ID!, locale: I18NLocaleCode): ContactEntityResponse
  deleteDebtor(id: ID!): DebtorEntityResponse
  deleteDisclosure(id: ID!): DisclosureEntityResponse
  deleteDocument(id: ID!): DocumentEntityResponse
  deleteDocumentCategory(id: ID!): DocumentCategoryEntityResponse
  deleteGeneral(locale: I18NLocaleCode): GeneralEntityResponse
  deleteHomePage(locale: I18NLocaleCode): HomePageEntityResponse
  deleteManagedObject(id: ID!, locale: I18NLocaleCode): ManagedObjectEntityResponse
  deleteOffice(id: ID!, locale: I18NLocaleCode): OfficeEntityResponse
  deletePage(id: ID!, locale: I18NLocaleCode): PageEntityResponse
  deletePartner(id: ID!): PartnerEntityResponse
  deleteProcedure(locale: I18NLocaleCode): ProcedureEntityResponse
  deleteReview(id: ID!, locale: I18NLocaleCode): ReviewEntityResponse
  deleteUploadFile(id: ID!): UploadFileEntityResponse
  deleteUploadFolder(id: ID!): UploadFolderEntityResponse

  """Delete an existing role"""
  deleteUsersPermissionsRole(id: ID!): UsersPermissionsDeleteRolePayload

  """Delete an existing user"""
  deleteUsersPermissionsUser(id: ID!): UsersPermissionsUserEntityResponse!

  """Confirm an email users email address"""
  emailConfirmation(confirmation: String!): UsersPermissionsLoginPayload

  """Request a reset password token"""
  forgotPassword(email: String!): UsersPermissionsPasswordPayload
  login(input: UsersPermissionsLoginInput!): UsersPermissionsLoginPayload!
  multipleUpload(field: String, files: [Upload]!, ref: String, refId: ID): [UploadFileEntityResponse]!

  """Register a user"""
  register(input: UsersPermissionsRegisterInput!): UsersPermissionsLoginPayload!
  removeFile(id: ID!): UploadFileEntityResponse

  """
  Reset user password. Confirm with a code (resetToken from forgotPassword)
  """
  resetPassword(code: String!, password: String!, passwordConfirmation: String!): UsersPermissionsLoginPayload
  updateApplication(data: ApplicationInput!, id: ID!): ApplicationEntityResponse
  updateArticle(data: ArticleInput!, id: ID!, locale: I18NLocaleCode): ArticleEntityResponse
  updateArticleJobsCategory(data: ArticleJobsCategoryInput!, id: ID!): ArticleJobsCategoryEntityResponse
  updateArticleNewsCategory(data: ArticleNewsCategoryInput!, id: ID!): ArticleNewsCategoryEntityResponse
  updateArticlePressCategory(data: ArticlePressCategoryInput!, id: ID!): ArticlePressCategoryEntityResponse
  updateBranch(data: BranchInput!, id: ID!, locale: I18NLocaleCode): BranchEntityResponse
  updateBundle(data: BundleInput!, id: ID!, locale: I18NLocaleCode): BundleEntityResponse
  updateCemetery(data: CemeteryInput!, id: ID!, locale: I18NLocaleCode): CemeteryEntityResponse
  updateCeremony(data: CeremonyInput!, id: ID!): CeremonyEntityResponse
  updateContact(data: ContactInput!, id: ID!, locale: I18NLocaleCode): ContactEntityResponse
  updateDebtor(data: DebtorInput!, id: ID!): DebtorEntityResponse
  updateDisclosure(data: DisclosureInput!, id: ID!): DisclosureEntityResponse
  updateDocument(data: DocumentInput!, id: ID!): DocumentEntityResponse
  updateDocumentCategory(data: DocumentCategoryInput!, id: ID!): DocumentCategoryEntityResponse
  updateFileInfo(id: ID!, info: FileInfoInput): UploadFileEntityResponse!
  updateGeneral(data: GeneralInput!, locale: I18NLocaleCode): GeneralEntityResponse
  updateHomePage(data: HomePageInput!, locale: I18NLocaleCode): HomePageEntityResponse
  updateManagedObject(data: ManagedObjectInput!, id: ID!, locale: I18NLocaleCode): ManagedObjectEntityResponse
  updateOffice(data: OfficeInput!, id: ID!, locale: I18NLocaleCode): OfficeEntityResponse
  updatePage(data: PageInput!, id: ID!, locale: I18NLocaleCode): PageEntityResponse
  updatePartner(data: PartnerInput!, id: ID!): PartnerEntityResponse
  updateProcedure(data: ProcedureInput!, locale: I18NLocaleCode): ProcedureEntityResponse
  updateReview(data: ReviewInput!, id: ID!, locale: I18NLocaleCode): ReviewEntityResponse
  updateUploadFile(data: UploadFileInput!, id: ID!): UploadFileEntityResponse
  updateUploadFolder(data: UploadFolderInput!, id: ID!): UploadFolderEntityResponse

  """Update an existing role"""
  updateUsersPermissionsRole(data: UsersPermissionsRoleInput!, id: ID!): UsersPermissionsUpdateRolePayload

  """Update an existing user"""
  updateUsersPermissionsUser(data: UsersPermissionsUserInput!, id: ID!): UsersPermissionsUserEntityResponse!
  upload(field: String, file: Upload!, info: FileInfoInput, ref: String, refId: ID): UploadFileEntityResponse!
}

type Navigation {
  id: String!
  name: String!
  slug: String!
  visible: Boolean!
}

type NavigationConfig {
  additionalFields: [String]!
  allowedLevels: Int
  contentTypes: [ContentTypes]
  contentTypesNameFields: ContentTypesNameFields
}

type NavigationDetails {
  id: String!
  items: [NavigationItem]!
  name: String!
  slug: String!
  visible: Boolean!
}

type NavigationItem {
  createdAt: String
  createdBy: String
  created_at: String
  created_by: String
  externalPath: String
  id: Int!
  items: [NavigationItem]
  master: Int
  menuAttached: Boolean!
  order: Int!
  parent: NavigationItem
  path: String
  related: NavigationItemRelatedData
  title: String!
  type: String!
  uiRouterKey: String!
  updatedAt: String
  updatedBy: String
  updated_at: String
  updated_by: String
}

union NavigationItemRelated = Page

type NavigationItemRelatedData {
  attributes: NavigationItemRelated
  id: Int!
}

enum NavigationRenderType {
  FLAT
  RFR
  TREE
}

type Office {
  branch: BranchEntityResponse
  contacts(filters: ContactFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ContactRelationResponseCollection
  createdAt: DateTime
  locale: String
  localizations(filters: OfficeFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): OfficeRelationResponseCollection
  openingHours: ComponentBlocksOpeningHoursUniversal
  title: String!
  titleInternal: String!
  updatedAt: DateTime
}

type OfficeEntity {
  attributes: Office
  id: ID
}

type OfficeEntityResponse {
  data: OfficeEntity
}

type OfficeEntityResponseCollection {
  data: [OfficeEntity!]!
  meta: ResponseCollectionMeta!
}

input OfficeFiltersInput {
  and: [OfficeFiltersInput]
  branch: BranchFiltersInput
  contacts: ContactFiltersInput
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: OfficeFiltersInput
  not: OfficeFiltersInput
  openingHours: ComponentBlocksOpeningHoursUniversalFiltersInput
  or: [OfficeFiltersInput]
  title: StringFilterInput
  titleInternal: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input OfficeInput {
  branch: ID
  contacts: [ID]
  openingHours: ComponentBlocksOpeningHoursUniversalInput
  title: String
  titleInternal: String
}

type OfficeRelationResponseCollection {
  data: [OfficeEntity!]!
}

type Page {
  coverMedia: UploadFileEntityResponse
  createdAt: DateTime
  ctaButton: ComponentBlocksButtonLink
  layout: ENUM_PAGE_LAYOUT!
  locale: String
  localizations(filters: PageFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageRelationResponseCollection
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZone]
  seo: ComponentGeneralSeo
  sidebar: ComponentBlocksSidebar
  slug: String!
  title: String!
  updatedAt: DateTime
}

type PageEntity {
  attributes: Page
  id: ID
}

type PageEntityResponse {
  data: PageEntity
}

type PageEntityResponseCollection {
  data: [PageEntity!]!
  meta: ResponseCollectionMeta!
}

input PageFiltersInput {
  and: [PageFiltersInput]
  createdAt: DateTimeFilterInput
  ctaButton: ComponentBlocksButtonLinkFiltersInput
  id: IDFilterInput
  layout: StringFilterInput
  locale: StringFilterInput
  localizations: PageFiltersInput
  not: PageFiltersInput
  or: [PageFiltersInput]
  perex: StringFilterInput
  publishedAt: DateTimeFilterInput
  seo: ComponentGeneralSeoFiltersInput
  sidebar: ComponentBlocksSidebarFiltersInput
  slug: StringFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PageInput {
  coverMedia: ID
  ctaButton: ComponentBlocksButtonLinkInput
  layout: ENUM_PAGE_LAYOUT
  perex: String
  publishedAt: DateTime
  sections: [PageSectionsDynamicZoneInput!]
  seo: ComponentGeneralSeoInput
  sidebar: ComponentBlocksSidebarInput
  slug: String
  title: String
}

type PageRelationResponseCollection {
  data: [PageEntity!]!
}

union PageSectionsDynamicZone = ComponentSectionsAccordionGroup | ComponentSectionsArticleJobsListing | ComponentSectionsArticleNewsListing | ComponentSectionsArticlePressListing | ComponentSectionsBranchGroup | ComponentSectionsBundleListing | ComponentSectionsBundleListingSimple | ComponentSectionsCemeteriesOpeningHours | ComponentSectionsCeremoniesArchiveSection | ComponentSectionsCeremoniesSection | ComponentSectionsContactGroup | ComponentSectionsDebtorsSection | ComponentSectionsDisclosuresSection | ComponentSectionsDivider | ComponentSectionsDocumentGroup | ComponentSectionsDocumentsSection | ComponentSectionsGallery | ComponentSectionsIframeSection | ComponentSectionsManualListing | ComponentSectionsMapOfManagedObjects | ComponentSectionsMapSection | ComponentSectionsMenuListing | ComponentSectionsNewsListing | ComponentSectionsOpeningHoursSection | ComponentSectionsPartnersSection | ComponentSectionsProceduresSection | ComponentSectionsPublicDisclosureSection | ComponentSectionsReviewListing | ComponentSectionsRichtext | Error

scalar PageSectionsDynamicZoneInput

type Pagination {
  page: Int!
  pageCount: Int!
  pageSize: Int!
  total: Int!
}

input PaginationArg {
  limit: Int
  page: Int
  pageSize: Int
  start: Int
}

type Partner {
  createdAt: DateTime
  featured: Boolean
  link: String!
  logo: UploadFileEntityResponse!
  priority: Int
  title: String!
  updatedAt: DateTime
}

type PartnerEntity {
  attributes: Partner
  id: ID
}

type PartnerEntityResponse {
  data: PartnerEntity
}

type PartnerEntityResponseCollection {
  data: [PartnerEntity!]!
  meta: ResponseCollectionMeta!
}

input PartnerFiltersInput {
  and: [PartnerFiltersInput]
  createdAt: DateTimeFilterInput
  featured: BooleanFilterInput
  id: IDFilterInput
  link: StringFilterInput
  not: PartnerFiltersInput
  or: [PartnerFiltersInput]
  priority: IntFilterInput
  title: StringFilterInput
  updatedAt: DateTimeFilterInput
}

input PartnerInput {
  featured: Boolean
  link: String
  logo: ID
  priority: Int
  title: String
}

type PartnerRelationResponseCollection {
  data: [PartnerEntity!]!
}

type Procedure {
  atMedicalFacility: ComponentGeneralProcedure
  createdAt: DateTime
  locale: String
  localizations: ProcedureRelationResponseCollection
  outsideMedicalFacility: ComponentGeneralProcedure
  updatedAt: DateTime
}

type ProcedureEntity {
  attributes: Procedure
  id: ID
}

type ProcedureEntityResponse {
  data: ProcedureEntity
}

type ProcedureEntityResponseCollection {
  data: [ProcedureEntity!]!
  meta: ResponseCollectionMeta!
}

input ProcedureFiltersInput {
  and: [ProcedureFiltersInput]
  atMedicalFacility: ComponentGeneralProcedureFiltersInput
  createdAt: DateTimeFilterInput
  locale: StringFilterInput
  localizations: ProcedureFiltersInput
  not: ProcedureFiltersInput
  or: [ProcedureFiltersInput]
  outsideMedicalFacility: ComponentGeneralProcedureFiltersInput
  updatedAt: DateTimeFilterInput
}

input ProcedureInput {
  atMedicalFacility: ComponentGeneralProcedureInput
  outsideMedicalFacility: ComponentGeneralProcedureInput
}

type ProcedureRelationResponseCollection {
  data: [ProcedureEntity!]!
}

enum PublicationState {
  LIVE
  PREVIEW
}

type Query {
  application(id: ID): ApplicationEntityResponse
  applications(filters: ApplicationFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ApplicationEntityResponseCollection
  article(id: ID, locale: I18NLocaleCode): ArticleEntityResponse
  articleJobsCategories(filters: ArticleJobsCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleJobsCategoryEntityResponseCollection
  articleJobsCategory(id: ID): ArticleJobsCategoryEntityResponse
  articleNewsCategories(filters: ArticleNewsCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticleNewsCategoryEntityResponseCollection
  articleNewsCategory(id: ID): ArticleNewsCategoryEntityResponse
  articlePressCategories(filters: ArticlePressCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ArticlePressCategoryEntityResponseCollection
  articlePressCategory(id: ID): ArticlePressCategoryEntityResponse
  articles(filters: ArticleFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): ArticleEntityResponseCollection
  branch(id: ID, locale: I18NLocaleCode): BranchEntityResponse
  branches(filters: BranchFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): BranchEntityResponseCollection
  bundle(id: ID, locale: I18NLocaleCode): BundleEntityResponse
  bundles(filters: BundleFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): BundleEntityResponseCollection
  cemeteries(filters: CemeteryFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): CemeteryEntityResponseCollection
  cemetery(id: ID, locale: I18NLocaleCode): CemeteryEntityResponse
  ceremonies(filters: CeremonyFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): CeremonyEntityResponseCollection
  ceremony(id: ID): CeremonyEntityResponse
  contact(id: ID, locale: I18NLocaleCode): ContactEntityResponse
  contacts(filters: ContactFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): ContactEntityResponseCollection
  debtor(id: ID): DebtorEntityResponse
  debtors(filters: DebtorFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DebtorEntityResponseCollection
  disclosure(id: ID): DisclosureEntityResponse
  disclosures(filters: DisclosureFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DisclosureEntityResponseCollection
  document(id: ID): DocumentEntityResponse
  documentCategories(filters: DocumentCategoryFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): DocumentCategoryEntityResponseCollection
  documentCategory(id: ID): DocumentCategoryEntityResponse
  documentFiletypes: [String]
  documents(filters: DocumentFiltersInput, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): DocumentEntityResponseCollection
  general(locale: I18NLocaleCode): GeneralEntityResponse
  homePage(locale: I18NLocaleCode): HomePageEntityResponse
  i18NLocale(id: ID): I18NLocaleEntityResponse
  i18NLocales(filters: I18NLocaleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): I18NLocaleEntityResponseCollection
  managedObject(id: ID, locale: I18NLocaleCode): ManagedObjectEntityResponse
  managedObjects(filters: ManagedObjectFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): ManagedObjectEntityResponseCollection
  me: UsersPermissionsMe
  office(id: ID, locale: I18NLocaleCode): OfficeEntityResponse
  offices(filters: OfficeFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): OfficeEntityResponseCollection
  page(id: ID, locale: I18NLocaleCode): PageEntityResponse
  pages(filters: PageFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, publicationState: PublicationState = LIVE, sort: [String] = []): PageEntityResponseCollection
  partner(id: ID): PartnerEntityResponse
  partners(filters: PartnerFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): PartnerEntityResponseCollection
  procedure(locale: I18NLocaleCode): ProcedureEntityResponse
  renderNavigation(locale: I18NLocaleCode, menuOnly: Boolean, navigationIdOrSlug: String!, path: String, type: NavigationRenderType): [NavigationItem]!
  renderNavigationChild(childUiKey: String!, id: String!, menuOnly: Boolean, type: NavigationRenderType): [NavigationItem]!
  review(id: ID, locale: I18NLocaleCode): ReviewEntityResponse
  reviews(filters: ReviewFiltersInput, locale: I18NLocaleCode, pagination: PaginationArg = {}, sort: [String] = []): ReviewEntityResponseCollection
  uploadFile(id: ID): UploadFileEntityResponse
  uploadFiles(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileEntityResponseCollection
  uploadFolder(id: ID): UploadFolderEntityResponse
  uploadFolders(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderEntityResponseCollection
  usersPermissionsRole(id: ID): UsersPermissionsRoleEntityResponse
  usersPermissionsRoles(filters: UsersPermissionsRoleFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsRoleEntityResponseCollection
  usersPermissionsUser(id: ID): UsersPermissionsUserEntityResponse
  usersPermissionsUsers(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserEntityResponseCollection
}

type ResponseCollectionMeta {
  pagination: Pagination!
}

type Review {
  author: String!
  createdAt: DateTime
  date: Date!
  description: String!
  locale: String
  localizations(filters: ReviewFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): ReviewRelationResponseCollection
  rating: Int!
  updatedAt: DateTime
}

type ReviewEntity {
  attributes: Review
  id: ID
}

type ReviewEntityResponse {
  data: ReviewEntity
}

type ReviewEntityResponseCollection {
  data: [ReviewEntity!]!
  meta: ResponseCollectionMeta!
}

input ReviewFiltersInput {
  and: [ReviewFiltersInput]
  author: StringFilterInput
  createdAt: DateTimeFilterInput
  date: DateFilterInput
  description: StringFilterInput
  id: IDFilterInput
  locale: StringFilterInput
  localizations: ReviewFiltersInput
  not: ReviewFiltersInput
  or: [ReviewFiltersInput]
  rating: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input ReviewInput {
  author: String
  date: Date
  description: String
  rating: Int
}

type ReviewRelationResponseCollection {
  data: [ReviewEntity!]!
}

input StringFilterInput {
  and: [String]
  between: [String]
  contains: String
  containsi: String
  endsWith: String
  eq: String
  eqi: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  ne: String
  not: StringFilterInput
  notContains: String
  notContainsi: String
  notIn: [String]
  notNull: Boolean
  null: Boolean
  or: [String]
  startsWith: String
}

"""A time string with format HH:mm:ss.SSS"""
scalar Time

input TimeFilterInput {
  and: [Time]
  between: [Time]
  contains: Time
  containsi: Time
  endsWith: Time
  eq: Time
  eqi: Time
  gt: Time
  gte: Time
  in: [Time]
  lt: Time
  lte: Time
  ne: Time
  not: TimeFilterInput
  notContains: Time
  notContainsi: Time
  notIn: [Time]
  notNull: Boolean
  null: Boolean
  or: [Time]
  startsWith: Time
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type UploadFile {
  alternativeText: String
  caption: String
  createdAt: DateTime
  ext: String
  formats: JSON
  hash: String!
  height: Int
  mime: String!
  name: String!
  previewUrl: String
  provider: String!
  provider_metadata: JSON
  related: [GenericMorph]
  size: Float!
  updatedAt: DateTime
  url: String!
  width: Int
}

type UploadFileEntity {
  attributes: UploadFile
  id: ID
}

type UploadFileEntityResponse {
  data: UploadFileEntity
}

type UploadFileEntityResponseCollection {
  data: [UploadFileEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFileFiltersInput {
  alternativeText: StringFilterInput
  and: [UploadFileFiltersInput]
  caption: StringFilterInput
  createdAt: DateTimeFilterInput
  ext: StringFilterInput
  folder: UploadFolderFiltersInput
  folderPath: StringFilterInput
  formats: JSONFilterInput
  hash: StringFilterInput
  height: IntFilterInput
  id: IDFilterInput
  mime: StringFilterInput
  name: StringFilterInput
  not: UploadFileFiltersInput
  or: [UploadFileFiltersInput]
  previewUrl: StringFilterInput
  provider: StringFilterInput
  provider_metadata: JSONFilterInput
  size: FloatFilterInput
  updatedAt: DateTimeFilterInput
  url: StringFilterInput
  width: IntFilterInput
}

input UploadFileInput {
  alternativeText: String
  caption: String
  ext: String
  folder: ID
  folderPath: String
  formats: JSON
  hash: String
  height: Int
  mime: String
  name: String
  previewUrl: String
  provider: String
  provider_metadata: JSON
  size: Float
  url: String
  width: Int
}

type UploadFileRelationResponseCollection {
  data: [UploadFileEntity!]!
}

type UploadFolder {
  children(filters: UploadFolderFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFolderRelationResponseCollection
  createdAt: DateTime
  files(filters: UploadFileFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UploadFileRelationResponseCollection
  name: String!
  parent: UploadFolderEntityResponse
  path: String!
  pathId: Int!
  updatedAt: DateTime
}

type UploadFolderEntity {
  attributes: UploadFolder
  id: ID
}

type UploadFolderEntityResponse {
  data: UploadFolderEntity
}

type UploadFolderEntityResponseCollection {
  data: [UploadFolderEntity!]!
  meta: ResponseCollectionMeta!
}

input UploadFolderFiltersInput {
  and: [UploadFolderFiltersInput]
  children: UploadFolderFiltersInput
  createdAt: DateTimeFilterInput
  files: UploadFileFiltersInput
  id: IDFilterInput
  name: StringFilterInput
  not: UploadFolderFiltersInput
  or: [UploadFolderFiltersInput]
  parent: UploadFolderFiltersInput
  path: StringFilterInput
  pathId: IntFilterInput
  updatedAt: DateTimeFilterInput
}

input UploadFolderInput {
  children: [ID]
  files: [ID]
  name: String
  parent: ID
  path: String
  pathId: Int
}

type UploadFolderRelationResponseCollection {
  data: [UploadFolderEntity!]!
}

type UsersPermissionsCreateRolePayload {
  ok: Boolean!
}

type UsersPermissionsDeleteRolePayload {
  ok: Boolean!
}

input UsersPermissionsLoginInput {
  identifier: String!
  password: String!
  provider: String! = "local"
}

type UsersPermissionsLoginPayload {
  jwt: String
  user: UsersPermissionsMe!
}

type UsersPermissionsMe {
  blocked: Boolean
  confirmed: Boolean
  email: String
  id: ID!
  role: UsersPermissionsMeRole
  username: String!
}

type UsersPermissionsMeRole {
  description: String
  id: ID!
  name: String!
  type: String
}

type UsersPermissionsPasswordPayload {
  ok: Boolean!
}

type UsersPermissionsPermission {
  action: String!
  createdAt: DateTime
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
}

type UsersPermissionsPermissionEntity {
  attributes: UsersPermissionsPermission
  id: ID
}

type UsersPermissionsPermissionEntityResponse {
  data: UsersPermissionsPermissionEntity
}

type UsersPermissionsPermissionEntityResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsPermissionFiltersInput {
  action: StringFilterInput
  and: [UsersPermissionsPermissionFiltersInput]
  createdAt: DateTimeFilterInput
  id: IDFilterInput
  not: UsersPermissionsPermissionFiltersInput
  or: [UsersPermissionsPermissionFiltersInput]
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
}

input UsersPermissionsPermissionInput {
  action: String
  role: ID
}

type UsersPermissionsPermissionRelationResponseCollection {
  data: [UsersPermissionsPermissionEntity!]!
}

input UsersPermissionsRegisterInput {
  email: String!
  password: String!
  username: String!
}

type UsersPermissionsRole {
  createdAt: DateTime
  description: String
  name: String!
  permissions(filters: UsersPermissionsPermissionFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsPermissionRelationResponseCollection
  type: String
  updatedAt: DateTime
  users(filters: UsersPermissionsUserFiltersInput, pagination: PaginationArg = {}, sort: [String] = []): UsersPermissionsUserRelationResponseCollection
}

type UsersPermissionsRoleEntity {
  attributes: UsersPermissionsRole
  id: ID
}

type UsersPermissionsRoleEntityResponse {
  data: UsersPermissionsRoleEntity
}

type UsersPermissionsRoleEntityResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsRoleFiltersInput {
  and: [UsersPermissionsRoleFiltersInput]
  createdAt: DateTimeFilterInput
  description: StringFilterInput
  id: IDFilterInput
  name: StringFilterInput
  not: UsersPermissionsRoleFiltersInput
  or: [UsersPermissionsRoleFiltersInput]
  permissions: UsersPermissionsPermissionFiltersInput
  type: StringFilterInput
  updatedAt: DateTimeFilterInput
  users: UsersPermissionsUserFiltersInput
}

input UsersPermissionsRoleInput {
  description: String
  name: String
  permissions: [ID]
  type: String
  users: [ID]
}

type UsersPermissionsRoleRelationResponseCollection {
  data: [UsersPermissionsRoleEntity!]!
}

type UsersPermissionsUpdateRolePayload {
  ok: Boolean!
}

type UsersPermissionsUser {
  blocked: Boolean
  confirmed: Boolean
  createdAt: DateTime
  email: String!
  provider: String
  role: UsersPermissionsRoleEntityResponse
  updatedAt: DateTime
  username: String!
}

type UsersPermissionsUserEntity {
  attributes: UsersPermissionsUser
  id: ID
}

type UsersPermissionsUserEntityResponse {
  data: UsersPermissionsUserEntity
}

type UsersPermissionsUserEntityResponseCollection {
  data: [UsersPermissionsUserEntity!]!
  meta: ResponseCollectionMeta!
}

input UsersPermissionsUserFiltersInput {
  and: [UsersPermissionsUserFiltersInput]
  blocked: BooleanFilterInput
  confirmationToken: StringFilterInput
  confirmed: BooleanFilterInput
  createdAt: DateTimeFilterInput
  email: StringFilterInput
  id: IDFilterInput
  not: UsersPermissionsUserFiltersInput
  or: [UsersPermissionsUserFiltersInput]
  password: StringFilterInput
  provider: StringFilterInput
  resetPasswordToken: StringFilterInput
  role: UsersPermissionsRoleFiltersInput
  updatedAt: DateTimeFilterInput
  username: StringFilterInput
}

input UsersPermissionsUserInput {
  blocked: Boolean
  confirmationToken: String
  confirmed: Boolean
  email: String
  password: String
  provider: String
  resetPasswordToken: String
  role: ID
  username: String
}

type UsersPermissionsUserRelationResponseCollection {
  data: [UsersPermissionsUserEntity!]!
}
